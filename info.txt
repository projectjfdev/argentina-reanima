‚úÖ Lo que tu compa√±ero debe hacer despu√©s de clonar el repo

1 - Instalar dependencias

Ejecutar: npm install

2 - Crear el archivo .env con la variable DATABASE_URL
DATABASE_URL="postgresql://postgres:password@localhost:5432/argreanimadb?schema=public"
Si seguiste todo como lo hizo Fazt, la variable de entorno deberia ser tal cual.
El user por defecto es postgres y la contrase√±a es password (o la que hayas puesto)
Y el puerto por defecto es 5432

3 - Generar el cliente de Prisma
Ya que el generated/prisma no deber√≠a subirse al repo, hacer lo siguiente:

Ejecutar esto en consola: npx prisma generate
Esto crear√° la carpeta src/generated/prisma con el cliente Prisma que us√°s en los imports.

4 - Crear la base de datos

Ejecutar: npx prisma db push
Esto crear√° (si no existe) la base de datos especificada en el archivo `.env` (en este caso `argreanimadb`), y sincronizar√° todas las tablas definidas en `schema.prisma` **directamente en la base de datos**, sin necesidad de crear migraciones.
Ideal para entornos de desarrollo o para montar el proyecto r√°pidamente.

--------------------------

¬øComo saber si tengo creada la base de datos argreanimadb?

1 - Abris la power shell de postgresql que instalamos cuando instalamos postgres, se llama SQL Shell (psql)
2 - Ejecutamos este comando: \l o \list
Resultado: Deberia aparecer argreanimadb

--------------------------

üß© Actualizaci√≥n de la base de datos con Prisma
üí° Opci√≥n 1 (Recomendada para desarrollo r√°pido o cambios peque√±os):
Si est√°s agregando/modificando campos y no necesit√°s un historial de migraciones:

Modific√° el archivo schema.prisma seg√∫n lo que necesites.

Elimin√° las filas existentes si est√°s agregando campos requeridos sin valor por defecto.

Ejecut√°:

npx prisma db push
Esto sincroniza tu base de datos con el esquema, sin generar una migraci√≥n. Es ideal para desarrollo.

Tus compa√±eros deben tambi√©n ejecutar:

npx prisma db push
despu√©s de hacer pull, para que su base de datos quede alineada con el schema.prisma.
Si a√∫n sigue sin poder usarse la db, ejecutar npx prisma generate

üß± Opci√≥n 2 (Para entornos m√°s estrictos o con historial de cambios):
Cuando alguien (por ejemplo Franco) modifica o agrega un modelo nuevo en schema.prisma, debe ejecutar:

npx prisma migrate dev --name descripcion-de-tu-cambio
Esto crea una carpeta nueva en /prisma/migrations y actualiza la base de datos local.

Luego, otro desarrollador (por ejemplo Jero) hace un pull del repo y debe ejecutar:

npx prisma migrate dev
Sin necesidad de usar --name, ya que la migraci√≥n ya fue creada.

-------------------------------------------

2 - Luego de que Franco realice el punto 1:

* Antes de hacer un pull en la base de datos necesitamos resetear nuestra base de datos local con  npx prisma migrate reset
* si ya tenemos datos reales de produccion no uysar el migrate reset por que se pierden los datos 

* Si tenemos datos de produccion es mejor usar -  npx prisma migrate resolve --applied "nombre-de-la-migraci√≥n"



Jero hace un pull del repo como siempre y, importante, ejecuta: npx prisma migrate dev
Sin necesidad de poner --name, porque la migraci√≥n ya est√° creada.

---------------------------

Interfaz grafica de prisma npx prisma studio

############# DEPLOY ###########
Luego de tener la URL de la DB:

1 - Agregar el siguiente script:

 "scripts": {
    "postinstall": "prisma generate"
  },

2 - Ejecutar en consola:
npx prisma generate
npx prisma db push

3 - Hacer deploy a Vercel

---------------------------

TODO: 

Meter esta info sobre el marco normativo, no se si en una LP nueva o ya existentes
https://drive.google.com/drive/u/4/folders/1W9G_CDp-jPCfmzswNhWv174Qv4Hem4Z-